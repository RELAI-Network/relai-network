
//! Autogenerated weights for `futur_assets_reg`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `morgueye`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/relai-network
// benchmark
// pallet
// --chain
// dev
// --pallet
// futur_assets_reg
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/futur-assets-reg/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

pub trait WeightInfo {
    fn submit_asset() -> Weight;
    fn pub_unpub_asset() -> Weight;
    fn delete_asset() -> Weight;
    fn buy_asset() -> Weight;
	fn update_asset() -> Weight;
}

/// Weight functions for `futur_assets_reg`.
//pub struct WeightInfo<T>(PhantomData<T>);
//impl<T: frame_system::Config> futur_assets_reg::WeightInfo for WeightInfo<T> {
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `FuturAssetsReg::NextAssetId` (r:1 w:1)
	/// Proof: `FuturAssetsReg::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `FuturAssetsReg::AssetRegistry` (r:0 w:1)
	/// Proof: `FuturAssetsReg::AssetRegistry` (`max_values`: None, `max_size`: Some(204), added: 2679, mode: `MaxEncodedLen`)
	/// Storage: `FuturAssetsReg::AssetByCreator` (r:0 w:1)
	/// Proof: `FuturAssetsReg::AssetByCreator` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn submit_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1489`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(45_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `FuturAssetsReg::AssetRegistry` (r:1 w:1)
	/// Proof: `FuturAssetsReg::AssetRegistry` (`max_values`: None, `max_size`: Some(204), added: 2679, mode: `MaxEncodedLen`)
	fn pub_unpub_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `195`
		//  Estimated: `3669`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(45_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3669))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `FuturAssetsReg::AssetRegistry` (r:1 w:1)
	/// Proof: `FuturAssetsReg::AssetRegistry` (`max_values`: None, `max_size`: Some(204), added: 2679, mode: `MaxEncodedLen`)
	fn delete_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `195`
		//  Estimated: `3669`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(44_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3669))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `FuturAssetsReg::AssetRegistry` (r:1 w:0)
	/// Proof: `FuturAssetsReg::AssetRegistry` (`max_values`: None, `max_size`: Some(204), added: 2679, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `FuturAssetsReg::AssetPurchases` (r:0 w:1)
	/// Proof: `FuturAssetsReg::AssetPurchases` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn buy_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `298`
		//  Estimated: `6196`
		// Minimum execution time: 180_000_000 picoseconds.
		Weight::from_parts(194_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `FuturAssetsReg::AssetByCreator` (r:1 w:0)
	/// Proof: `FuturAssetsReg::AssetByCreator` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `FuturAssetsReg::AssetRegistry` (r:1 w:1)
	/// Proof: `FuturAssetsReg::AssetRegistry` (`max_values`: None, `max_size`: Some(204), added: 2679, mode: `MaxEncodedLen`)
	fn update_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235`
		//  Estimated: `3669`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(53_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3669))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
